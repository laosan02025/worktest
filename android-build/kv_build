#!/bin/sh

CURDIR=$PWD

OURNAME=kv_build
PRELOADPATH=$OURNAME/preload/
APPPATHNAME=system/priv-app
LIBPATHNAME=system/lib
BINFILES="KvServer kvauthserver"
BINFILESPATH=system/bin

if [ `basename $CURDIR` = "$OURNAME" ] ;then
	cd ..
else
	echo $CURDIR
fi

fastboot(){
	setbuildenv
	make hiboot -j2 2>&1 | tee hiboot.log
}

clean_fastboot(){
	setbuildenv
	rm -rf out/target/product/$TARGET_PRODUCT/obj/NAND_HIBOOT_OBJ/
	rm -rf out/target/product/$TARGET_PRODUCT/obj/EMMC_HIBOOT_OBJ/
}

recovery(){
	setbuildenv
	make recoveryimg -j2 2>&1 | tee recovery.log
}

clean_recovery(){
	setbuildenv
	rm -rf out/target/product/TARGET_PRODUCT/obj/RECOVERY_OBJ/
}

system(){
	setbuildenv
	if [ -z "$OUTPATH"  ] ;then
		make bigfish -j2 2>&1 | tee bigfish.log
	fi
	preload
	make bigfish -j2 2>&1 | tee bigfish.log	
}

kernel(){
	setbuildenv
	make kernel -j2 2>&1 | tee kernel.log
}

clean_kernel(){
	setbuildenv
	rm -rf out/target/product/$TARGET_PRODUCT/obj/KERNEL_OBJ/
}

preload(){
	croot
	if [ -z "$OUTPATH" ] ;then
		echo NO OUTPATH FIND Please make system first!!!
	else
		echo ==================================================================
		echo preload files to path:
		echo $OUTPATH
		echo  
		echo ==================================================================
		for binfiles in $BINFILES ; do
			if [ -f $PRELOADPATH/$binfiles ] ;then
				echo cp $binfiles to $OUTPATH/$BINFILESPATH
				cp $PRELOADPATH/$binfiles $OUTPATH/$BINFILESPATH
				chmod ugo+x $OUTPATH/$BINFILESPATH/$binfiles 
			fi
		done
		
		find $PRELOADPATH -iname "*.apk" -exec cp {} $OUTPATH/$APPPATHNAME \;
		find $PRELOADPATH -iname "*.so" -exec cp {} $OUTPATH/$LIBPATHNAME \;
	fi
}

update(){
	setbuildenv
	make updatezip -j32 2>&1 | tee updatezip.log
}

setbuildenv(){
	if [ -z "$TARGET_PRODUCT" ] ; then
		source build/envsetup.sh
		lunch 
	fi
	export OUTPATH=./out/target/product/$TARGET_PRODUCT
}

helpinfo(){
	echo 
	echo =================================================================================================================
	echo 
	echo 1.If you want compile SECURITY version,you must edit device/hisilicon/$TARGET_PRODUCT/device.mk :
	echo "  HISILICON_SECURITY_L2 := true"
	echo 
	echo 2.If you add some external APIs,please run "make update-api" to update frameworks/base/api/current.txt .
	echo 
	echo 3.You can edit kernel recovery and sdk configs by command :
	echo "  make kernel_menuconfig"
	echo "  make recovery_menuconfig"
	echo "  cd device/hisilicon/bigfish/sdk && make menuconfig SDK_CFGFILE=configs/hi3798mdmo1a_hi3798mv100_android_cfg.mak"
	echo 
	echo 4.To update driver modules,run ./device/hisilicon/Hi3798MV100/kernel_module.sh
	echo
	echo 5.To update wifi driver,run make wifi -j2 2>&1 | tee wifi.log
	echo 
	echo 6.Modify bootargs:   device/hisilicon/$TARGET_PRODUCT/etc/bootargs_Hi3798MV100-nand.txt
	echo  
	echo 7. device/hisilicon/$TARGET_PRODUCT/BoardConfig.mk
	echo 
	echo 8.make fs img:
	echo "  make ubifs -j2 2>&1 | tee ubifs.log" 
	echo "  make ext4fs -j2 2>&1 | tee ext4fs.log"
	echo 
	echo 9.make key:
	echo "  make_key releasekey '/C=CN/ST=JiangSu/L=NanJing/O=Company/OU=Department/CN=YourName/emailAddress=YourE-mailAddress'"
	echo 
	echo 10.dump key:
	echo "  java -jar out/host/linux-x86/framework/dumpkey.jar build/target/product/security/testkey.x509.pem > bootable/recovery/res/keys"
	echo 
	echo "11.convert key: pem+pk8->jks"
	echo "  ./keytool-importkeypair -k ~/.android/debug.keystore -p android -pk8 platform.pk8 -cert platform.x509.pem -alias platform"
	echo 
	echo 12.signapk:
	echo "  java -jar out/host/linux-x86/framework/signapk.jar -w  build/target/product/security/testkey.x509.pem "
	echo "  build/target/product/security/testkey.pk8 source.apk destine.apk"
	echo 
	echo ==================================================================================================================
	echo 
}

echo =====================================
echo 
echo What do you want to make
echo  
echo =====================================


select maketype in "fastboot" "recovery" "kernel" "system" "update.zip" "clean" "help"; do
	echo =============================
	echo
	echo YOU CHOOSE MAKE $maketype
	echo
	echo =============================
	
	case $maketype in
	fastboot) 
		echo make fastboot
		fastboot;;
	recovery)
		echo make recovery 
		recovery;;
	system)	
		echo make system  
		system;;
	update.zip) 
		echo make updatezip  
		update;;
	help)
		echo HELP INFO:
		helpinfo;;
	kernel)
		echo make kernel
		kernel;;
	clean)
		echo
		echo YOU WILL CEAN SOMETHING
		echo 

		select cleantype in "fastboot" "recovery" "kernel" "system" ; do
			echo 
			echo YOU CHOOSE CLEAN $cleantype
			echo
			
			case $cleantype in
			fastboot)
				clean_fastboot;;
			recovery)
				clean_recovery;;
			kernel)
				clean_kernel;;
			system)
				make clean;;
			esac
			break;
		done
	esac
	break;
done

cd $CURDIR
